// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopGenre is an object representing the database table.
type ShopGenre struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *shopGenreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopGenreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopGenreColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var ShopGenreTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "shop_genres.id",
	Name: "shop_genres.name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ShopGenreWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "`shop_genres`.`id`"},
	Name: whereHelperstring{field: "`shop_genres`.`name`"},
}

// ShopGenreRels is where relationship names are stored.
var ShopGenreRels = struct {
	ShopGenreRelations string
}{
	ShopGenreRelations: "ShopGenreRelations",
}

// shopGenreR is where relationships are stored.
type shopGenreR struct {
	ShopGenreRelations ShopGenreRelationSlice `boil:"ShopGenreRelations" json:"ShopGenreRelations" toml:"ShopGenreRelations" yaml:"ShopGenreRelations"`
}

// NewStruct creates a new relationship struct
func (*shopGenreR) NewStruct() *shopGenreR {
	return &shopGenreR{}
}

// shopGenreL is where Load methods for each relationship are stored.
type shopGenreL struct{}

var (
	shopGenreAllColumns            = []string{"id", "name"}
	shopGenreColumnsWithoutDefault = []string{"name"}
	shopGenreColumnsWithDefault    = []string{"id"}
	shopGenrePrimaryKeyColumns     = []string{"id"}
)

type (
	// ShopGenreSlice is an alias for a slice of pointers to ShopGenre.
	// This should almost always be used instead of []ShopGenre.
	ShopGenreSlice []*ShopGenre
	// ShopGenreHook is the signature for custom ShopGenre hook methods
	ShopGenreHook func(context.Context, boil.ContextExecutor, *ShopGenre) error

	shopGenreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopGenreType                 = reflect.TypeOf(&ShopGenre{})
	shopGenreMapping              = queries.MakeStructMapping(shopGenreType)
	shopGenrePrimaryKeyMapping, _ = queries.BindMapping(shopGenreType, shopGenreMapping, shopGenrePrimaryKeyColumns)
	shopGenreInsertCacheMut       sync.RWMutex
	shopGenreInsertCache          = make(map[string]insertCache)
	shopGenreUpdateCacheMut       sync.RWMutex
	shopGenreUpdateCache          = make(map[string]updateCache)
	shopGenreUpsertCacheMut       sync.RWMutex
	shopGenreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopGenreBeforeInsertHooks []ShopGenreHook
var shopGenreBeforeUpdateHooks []ShopGenreHook
var shopGenreBeforeDeleteHooks []ShopGenreHook
var shopGenreBeforeUpsertHooks []ShopGenreHook

var shopGenreAfterInsertHooks []ShopGenreHook
var shopGenreAfterSelectHooks []ShopGenreHook
var shopGenreAfterUpdateHooks []ShopGenreHook
var shopGenreAfterDeleteHooks []ShopGenreHook
var shopGenreAfterUpsertHooks []ShopGenreHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopGenre) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopGenre) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopGenre) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopGenre) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopGenre) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopGenre) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopGenre) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopGenre) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopGenre) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopGenreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopGenreHook registers your hook function for all future operations.
func AddShopGenreHook(hookPoint boil.HookPoint, shopGenreHook ShopGenreHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		shopGenreBeforeInsertHooks = append(shopGenreBeforeInsertHooks, shopGenreHook)
	case boil.BeforeUpdateHook:
		shopGenreBeforeUpdateHooks = append(shopGenreBeforeUpdateHooks, shopGenreHook)
	case boil.BeforeDeleteHook:
		shopGenreBeforeDeleteHooks = append(shopGenreBeforeDeleteHooks, shopGenreHook)
	case boil.BeforeUpsertHook:
		shopGenreBeforeUpsertHooks = append(shopGenreBeforeUpsertHooks, shopGenreHook)
	case boil.AfterInsertHook:
		shopGenreAfterInsertHooks = append(shopGenreAfterInsertHooks, shopGenreHook)
	case boil.AfterSelectHook:
		shopGenreAfterSelectHooks = append(shopGenreAfterSelectHooks, shopGenreHook)
	case boil.AfterUpdateHook:
		shopGenreAfterUpdateHooks = append(shopGenreAfterUpdateHooks, shopGenreHook)
	case boil.AfterDeleteHook:
		shopGenreAfterDeleteHooks = append(shopGenreAfterDeleteHooks, shopGenreHook)
	case boil.AfterUpsertHook:
		shopGenreAfterUpsertHooks = append(shopGenreAfterUpsertHooks, shopGenreHook)
	}
}

// One returns a single shopGenre record from the query.
func (q shopGenreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopGenre, error) {
	o := &ShopGenre{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shop_genres")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopGenre records from the query.
func (q shopGenreQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopGenreSlice, error) {
	var o []*ShopGenre

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShopGenre slice")
	}

	if len(shopGenreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopGenre records in the query.
func (q shopGenreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shop_genres rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopGenreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shop_genres exists")
	}

	return count > 0, nil
}

// ShopGenreRelations retrieves all the shop_genre_relation's ShopGenreRelations with an executor.
func (o *ShopGenre) ShopGenreRelations(mods ...qm.QueryMod) shopGenreRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`shop_genre_relations`.`shop_genre_id`=?", o.ID),
	)

	query := ShopGenreRelations(queryMods...)
	queries.SetFrom(query.Query, "`shop_genre_relations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`shop_genre_relations`.*"})
	}

	return query
}

// LoadShopGenreRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shopGenreL) LoadShopGenreRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopGenre interface{}, mods queries.Applicator) error {
	var slice []*ShopGenre
	var object *ShopGenre

	if singular {
		object = maybeShopGenre.(*ShopGenre)
	} else {
		slice = *maybeShopGenre.(*[]*ShopGenre)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopGenreR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopGenreR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shop_genre_relations`),
		qm.WhereIn(`shop_genre_relations.shop_genre_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shop_genre_relations")
	}

	var resultSlice []*ShopGenreRelation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shop_genre_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shop_genre_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shop_genre_relations")
	}

	if len(shopGenreRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShopGenreRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shopGenreRelationR{}
			}
			foreign.R.ShopGenre = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShopGenreID {
				local.R.ShopGenreRelations = append(local.R.ShopGenreRelations, foreign)
				if foreign.R == nil {
					foreign.R = &shopGenreRelationR{}
				}
				foreign.R.ShopGenre = local
				break
			}
		}
	}

	return nil
}

// AddShopGenreRelations adds the given related objects to the existing relationships
// of the shop_genre, optionally inserting them as new records.
// Appends related to o.R.ShopGenreRelations.
// Sets related.R.ShopGenre appropriately.
func (o *ShopGenre) AddShopGenreRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShopGenreRelation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShopGenreID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `shop_genre_relations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"shop_genre_id"}),
				strmangle.WhereClause("`", "`", 0, shopGenreRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShopGenreID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shopGenreR{
			ShopGenreRelations: related,
		}
	} else {
		o.R.ShopGenreRelations = append(o.R.ShopGenreRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shopGenreRelationR{
				ShopGenre: o,
			}
		} else {
			rel.R.ShopGenre = o
		}
	}
	return nil
}

// ShopGenres retrieves all the records using an executor.
func ShopGenres(mods ...qm.QueryMod) shopGenreQuery {
	mods = append(mods, qm.From("`shop_genres`"))
	return shopGenreQuery{NewQuery(mods...)}
}

// FindShopGenre retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopGenre(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ShopGenre, error) {
	shopGenreObj := &ShopGenre{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `shop_genres` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopGenreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shop_genres")
	}

	if err = shopGenreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopGenreObj, err
	}

	return shopGenreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopGenre) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_genres provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopGenreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopGenreInsertCacheMut.RLock()
	cache, cached := shopGenreInsertCache[key]
	shopGenreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopGenreAllColumns,
			shopGenreColumnsWithDefault,
			shopGenreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopGenreType, shopGenreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopGenreType, shopGenreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `shop_genres` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `shop_genres` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `shop_genres` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, shopGenrePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shop_genres")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == shopGenreMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for shop_genres")
	}

CacheNoHooks:
	if !cached {
		shopGenreInsertCacheMut.Lock()
		shopGenreInsertCache[key] = cache
		shopGenreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopGenre.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopGenre) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopGenreUpdateCacheMut.RLock()
	cache, cached := shopGenreUpdateCache[key]
	shopGenreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopGenreAllColumns,
			shopGenrePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shop_genres, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `shop_genres` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, shopGenrePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopGenreType, shopGenreMapping, append(wl, shopGenrePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shop_genres row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shop_genres")
	}

	if !cached {
		shopGenreUpdateCacheMut.Lock()
		shopGenreUpdateCache[key] = cache
		shopGenreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopGenreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shop_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shop_genres")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopGenreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `shop_genres` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopGenrePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shopGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shopGenre")
	}
	return rowsAff, nil
}

var mySQLShopGenreUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopGenre) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_genres provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopGenreColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLShopGenreUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopGenreUpsertCacheMut.RLock()
	cache, cached := shopGenreUpsertCache[key]
	shopGenreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopGenreAllColumns,
			shopGenreColumnsWithDefault,
			shopGenreColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			shopGenreAllColumns,
			shopGenrePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert shop_genres, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`shop_genres`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `shop_genres` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(shopGenreType, shopGenreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopGenreType, shopGenreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for shop_genres")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == shopGenreMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(shopGenreType, shopGenreMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for shop_genres")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for shop_genres")
	}

CacheNoHooks:
	if !cached {
		shopGenreUpsertCacheMut.Lock()
		shopGenreUpsertCache[key] = cache
		shopGenreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopGenre record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopGenre) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShopGenre provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopGenrePrimaryKeyMapping)
	sql := "DELETE FROM `shop_genres` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shop_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shop_genres")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopGenreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shopGenreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shop_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_genres")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopGenreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopGenreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `shop_genres` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopGenrePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shopGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_genres")
	}

	if len(shopGenreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopGenre) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopGenre(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopGenreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopGenreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `shop_genres`.* FROM `shop_genres` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, shopGenrePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShopGenreSlice")
	}

	*o = slice

	return nil
}

// ShopGenreExists checks if the ShopGenre row exists.
func ShopGenreExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `shop_genres` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shop_genres exists")
	}

	return exists, nil
}
