// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShopGenreRelations(t *testing.T) {
	t.Parallel()

	query := ShopGenreRelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopGenreRelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopGenreRelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShopGenreRelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopGenreRelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopGenreRelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopGenreRelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopGenreRelationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShopGenreRelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopGenreRelationExists to return true, but got false.")
	}
}

func testShopGenreRelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopGenreRelationFound, err := FindShopGenreRelation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopGenreRelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopGenreRelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShopGenreRelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopGenreRelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShopGenreRelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopGenreRelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopGenreRelationOne := &ShopGenreRelation{}
	shopGenreRelationTwo := &ShopGenreRelation{}
	if err = randomize.Struct(seed, shopGenreRelationOne, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, shopGenreRelationTwo, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopGenreRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopGenreRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopGenreRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopGenreRelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopGenreRelationOne := &ShopGenreRelation{}
	shopGenreRelationTwo := &ShopGenreRelation{}
	if err = randomize.Struct(seed, shopGenreRelationOne, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, shopGenreRelationTwo, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopGenreRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopGenreRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopGenreRelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func shopGenreRelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopGenreRelation) error {
	*o = ShopGenreRelation{}
	return nil
}

func testShopGenreRelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShopGenreRelation{}
	o := &ShopGenreRelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation object: %s", err)
	}

	AddShopGenreRelationHook(boil.BeforeInsertHook, shopGenreRelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationBeforeInsertHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.AfterInsertHook, shopGenreRelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationAfterInsertHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.AfterSelectHook, shopGenreRelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationAfterSelectHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.BeforeUpdateHook, shopGenreRelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationBeforeUpdateHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.AfterUpdateHook, shopGenreRelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationAfterUpdateHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.BeforeDeleteHook, shopGenreRelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationBeforeDeleteHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.AfterDeleteHook, shopGenreRelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationAfterDeleteHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.BeforeUpsertHook, shopGenreRelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationBeforeUpsertHooks = []ShopGenreRelationHook{}

	AddShopGenreRelationHook(boil.AfterUpsertHook, shopGenreRelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopGenreRelationAfterUpsertHooks = []ShopGenreRelationHook{}
}

func testShopGenreRelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopGenreRelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopGenreRelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopGenreRelationToOneShopGenreUsingShopGenre(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShopGenreRelation
	var foreign ShopGenre

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopGenreDBTypes, false, shopGenreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenre struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShopGenreID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShopGenre().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ShopGenreRelationSlice{&local}
	if err = local.L.LoadShopGenre(ctx, tx, false, (*[]*ShopGenreRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopGenre == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShopGenre = nil
	if err = local.L.LoadShopGenre(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopGenre == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testShopGenreRelationToOneShopUsingShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShopGenreRelation
	var foreign Shop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shopGenreRelationDBTypes, false, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShopID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ShopGenreRelationSlice{&local}
	if err = local.L.LoadShop(ctx, tx, false, (*[]*ShopGenreRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shop = nil
	if err = local.L.LoadShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testShopGenreRelationToOneSetOpShopGenreUsingShopGenre(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopGenreRelation
	var b, c ShopGenre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopGenreRelationDBTypes, false, strmangle.SetComplement(shopGenreRelationPrimaryKeyColumns, shopGenreRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopGenreDBTypes, false, strmangle.SetComplement(shopGenrePrimaryKeyColumns, shopGenreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopGenreDBTypes, false, strmangle.SetComplement(shopGenrePrimaryKeyColumns, shopGenreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShopGenre{&b, &c} {
		err = a.SetShopGenre(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShopGenre != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShopGenreRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShopGenreID != x.ID {
			t.Error("foreign key was wrong value", a.ShopGenreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopGenreID))
		reflect.Indirect(reflect.ValueOf(&a.ShopGenreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShopGenreID != x.ID {
			t.Error("foreign key was wrong value", a.ShopGenreID, x.ID)
		}
	}
}
func testShopGenreRelationToOneSetOpShopUsingShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopGenreRelation
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopGenreRelationDBTypes, false, strmangle.SetComplement(shopGenreRelationPrimaryKeyColumns, shopGenreRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shop{&b, &c} {
		err = a.SetShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShopGenreRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShopID != x.ID {
			t.Error("foreign key was wrong value", a.ShopID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopID))
		reflect.Indirect(reflect.ValueOf(&a.ShopID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShopID != x.ID {
			t.Error("foreign key was wrong value", a.ShopID, x.ID)
		}
	}
}

func testShopGenreRelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopGenreRelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopGenreRelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopGenreRelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopGenreRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopGenreRelationDBTypes = map[string]string{`ID`: `int`, `ShopGenreID`: `int`, `ShopID`: `int`}
	_                        = bytes.MinRead
)

func testShopGenreRelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopGenreRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopGenreRelationAllColumns) == len(shopGenreRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopGenreRelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopGenreRelationAllColumns) == len(shopGenreRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopGenreRelation{}
	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopGenreRelationDBTypes, true, shopGenreRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopGenreRelationAllColumns, shopGenreRelationPrimaryKeyColumns) {
		fields = shopGenreRelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopGenreRelationAllColumns,
			shopGenreRelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopGenreRelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopGenreRelationsUpsert(t *testing.T) {
	t.Parallel()

	if len(shopGenreRelationAllColumns) == len(shopGenreRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLShopGenreRelationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShopGenreRelation{}
	if err = randomize.Struct(seed, &o, shopGenreRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopGenreRelation: %s", err)
	}

	count, err := ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopGenreRelationDBTypes, false, shopGenreRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopGenreRelation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopGenreRelation: %s", err)
	}

	count, err = ShopGenreRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
